image:
  pullPolicy: Always
  repository: eoepca/proc-ades
  tag: "2.0.7"

persistence:
  enabled: true
  # existingUserDataClaim:
  # existingProcServicesClaim:
  storageClass: scw-bssd
  userDataAccessMode: ReadWriteOnce
  userDataSize: 4Gi
  procServicesAccessMode: ReadWriteOnce
  procServicesSize: 2Gi


nodeSelector:
  k8s.scaleway.com/pool-name: default

fullnameOverride: "ades-dev-eoepca"

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: 148.251.234.194/32
    kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ades-dev-eoepca.terradue.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


workflowExecutor:
  processingKeepWorkspace: "False"
  processingMaxCores: "2"
  processingMaxRam: 5Gi
  processingVolumeSize: "30Gi"

  # Size of the Kubernetes Tmp Volumes
  processingVolumeTmpSize: "30Gi"
  # Size of the Kubernetes Output Volumes
  processingVolumeOutputSize: "20Gi"

  calrissianImage: "terradue/calrissian:0.11.0-sprint1"
  #calrissianJobTemplatePath: "/tmp/CalrissianJobTemplate.yaml"

  imagePullSecrets: []
#    - name: ades-secret
  inputs:
    APP: ades

    STAGEOUT_AWS_ACCESS_KEY_ID: SCWE1S94FGXM8GWCSS80
    STAGEOUT_AWS_REGION: fr-par
    STAGEOUT_AWS_SECRET_ACCESS_KEY: 4b13264c-90dc-4b19-81ab-3ecb1af92968
    STAGEOUT_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEOUT_OUTPUT: s3://eoepca-ades

    STAGEIN_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEIN_AWS_ACCESS_KEY_ID: SCWE1S94FGXM8GWCSS80
    STAGEIN_AWS_SECRET_ACCESS_KEY: 4b13264c-90dc-4b19-81ab-3ecb1af92968
    STAGEIN_AWS_REGION: fr-par

  # Number of retries before considering a Job as failed
  backofflimit: 1

  processingKeepWorkspaceIfFailed: True

  processingNodeSelector:
    k8s.scaleway.com/pool-name: processing-node-pool-dev

  processingStorageClass: openebs-kernel-nfs-scw

  pod:
    env:
      TEST: TEST_ENV_VAR

  main:
    cwl: ""

  stageout:
    cwl: |
      cwlVersion: v1.0
      baseCommand: Stars
      doc: "Run Stars for staging results"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:2.3.0
      id: stars
      arguments:
        - copy
        - -v
        - -r
        - '4'
        - -o
        - $( inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process )
        - valueFrom: |
            ${
                if( !Array.isArray(inputs.wf_outputs) )
                {
                    return inputs.wf_outputs.path + "/catalog.json";
                }
                var args=[];
                for (var i = 0; i < inputs.wf_outputs.length; i++)
                {
                    args.push(inputs.wf_outputs[i].path + "/catalog.json");
                }
                return args;
            }
      inputs:
        ADES_STAGEOUT_AWS_PROFILE:
          type: string?
        ADES_STAGEOUT_AWS_SERVICEURL:
          type: string?
        ADES_STAGEOUT_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY:
          type: string?
        aws_profiles_location:
          type: File?
        ADES_STAGEOUT_OUTPUT:
          type: string?
        ADES_STAGEOUT_AWS_REGION:
          type: string?
        process:
          type: string
      outputs:
        s3_catalog_output:
          outputBinding:
            outputEval: ${ return inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process + "/catalog.json"; }
          type: string
      requirements:
        InlineJavascriptRequirement: { }
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.ADES_STAGEOUT_AWS_PROFILE)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEOUT_AWS_SERVICEURL)
            AWS__Region: $(inputs.ADES_STAGEOUT_AWS_REGION)
            AWS__AuthenticationRegion: $(inputs.ADES_STAGEOUT_AWS_REGION)
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)
        ResourceRequirement: { }

  stagein:
    cwl: |
      cwlVersion: v1.0
      doc: "Run Stars for staging input data"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:1.3.5
      id: stars
      requirements:
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.aws_profile)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEIN_AWS_SERVICEURL)
            AWS__Region: $(inputs.ADES_STAGEIN_AWS_REGION)
            AWS__AuthenticationRegion: $(inputs.ADES_STAGEIN_AWS_REGION)
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)
        ResourceRequirement: {}
        InlineJavascriptRequirement: {}
        InitialWorkDirRequirement:
          listing:
            - entryname: stagein.sh
              entry: |-
                #!/bin/bash
                    set -x 
                
                    identifier='$( inputs.input.split("uid=")[1])'
                    reference="https://s3.cl2.du.cesnet.cz/vo_t2_geohazards:cache/\${identifier}/\${identifier}.json"
                    Stars copy --harvest -v -rel -r '4' -o ./ \${reference}
                    res=$? 
                
                    rm -fr stagein.sh
                    exit \${res}
      
      baseCommand: ['/bin/bash', 'stagein.sh']
      
      inputs:
        ADES_STAGEIN_AWS_SERVICEURL:
          type: string?
        ADES_STAGEIN_AWS_REGION:
          type: string?
        ADES_STAGEIN_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:
          type: string?
      outputs:
        staged:
          outputBinding:
            glob: .
          type: Directory


ades-longhorn:
  enabled: false