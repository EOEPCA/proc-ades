image:
  pullPolicy: Always
  repository: eoepca/proc-ades
  tag: "2.0.13"

persistence:
  enabled: true
  # existingUserDataClaim:
  # existingProcServicesClaim:
  storageClass: standard
  userDataAccessMode: ReadWriteOnce
  userDataSize: 4Gi
  procServicesAccessMode: ReadWriteOnce
  procServicesSize: 2Gi


nodeSelector: {}

fullnameOverride: "ades"

ingress:
  enabled: false
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: 148.251.234.194/32, 88.99.30.238/32, 88.99.143.67/32, 85.10.193.44/32, 94.130.9.6/32, 148.251.78.230/32, 138.201.138.217/32, 138.201.132.131/32, 88.99.100.194/32, 138.201.84.23/32, 49.12.83.233/32, 138.201.205.36/32, 88.99.140.141/32, 136.243.43.254/32, 168.119.149.121/32
    kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: ades-dev.terradue.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


workflowExecutor:
  processingKeepWorkspace: "False"
  processingMaxCores: "2"
  processingMaxRam: 5Gi
  processingVolumeSize: "30Gi"

  # Size of the Kubernetes Tmp Volumes
  processingVolumeTmpSize: "30Gi"
  # Size of the Kubernetes Output Volumes
  processingVolumeOutputSize: "20Gi"

    #  calrissianImage: "terradue/calrissian:0.11.0-exp2"
  calrissianImage: "terradue/calrissian:0.12.0"
  #calrissianJobTemplatePath: "/tmp/CalrissianJobTemplate.yaml"

  imagePullSecrets: []
#    - name: ades-secret
  inputs:
    APP: ades

#    STAGEOUT_AWS_ACCESS_KEY_ID: SCWE1S94FGXM8GWCSS80
#    STAGEOUT_AWS_REGION: fr-par
#    STAGEOUT_AWS_SECRET_ACCESS_KEY: 4b13264c-90dc-4b19-81ab-3ecb1af92968
#    STAGEOUT_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
#    STAGEOUT_OUTPUT: s3://eoepca-ades

    STAGEOUT_OUTPUT: cpe-e2e-runs
    STAGEOUT_AWS_ACCESS_KEY_ID: SCW97Q14M0BWZQB92Z29
    STAGEOUT_AWS_SECRET_ACCESS_KEY: 94336c5f-cd32-469c-9735-aeca8fcd749e
    STAGEOUT_AWS_SERVICEURL: https://s3.pl-waw.scw.cloud
    STAGEOUT_AWS_REGION: pl-waw


    STAGEIN_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEIN_AWS_ACCESS_KEY_ID: SCWEZ2E06RTJ8KAKCKBY
    STAGEIN_AWS_SECRET_ACCESS_KEY: e13bf6e0-6278-4a96-a9d7-2a40575211cd
    STAGEIN_AWS_REGION: fr-par

  # Number of retries before considering a Job as failed
  backofflimit: 1

  processingKeepWorkspaceIfFailed: True

  processingNodeSelector: {}
#    k8s.scaleway.com/pool-name: processing-node-pool-dev-pro

  processingStorageClass: standard

#  errorMessages:
#    "Job has reached the specified backoff limit": "Unexpected application error occurred. (exit codes:  $steps_exit_codes, namespace: $namespace, workflow_name: $workflow_name )"

  pod:
    env:
      TEST: TEST_ENV_VAR
#      S3_BUCKET: cpe-e2e-runs
#      AWS_ACCESS_KEY_ID: SCW97Q14M0BWZQB92Z29
#      AWS_SECRET_ACCESS_KEY: 94336c5f-cd32-469c-9735-aeca8fcd749e
#      AWS__ServiceURL: https://s3.pl-waw.scw.cloud
#      AWS__Region: pl-waw
#      AWS__AuthenticationRegion: pl-waw


  main:
    cwl: |
      class: Workflow
      $namespaces:
          cwltool: http://commonwl.org/cwltool#
      doc: Main stage manager
      id: main
      label: macro-cwl
      inputs: {}
      outputs: {}
      hints:
          "cwltool:Secrets":
              secrets: []
      requirements:
          SubworkflowFeatureRequirement: {}
          ScatterFeatureRequirement: {}
          InlineJavascriptRequirement: {}

  stageout:
    cwl: |
      cwlVersion: v1.0
      baseCommand: ['/bin/bash', 'stageout.sh']
      doc: "Run Stars for staging results"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:2.3.1
        "cwltool:Secrets":
          secrets:
          - ADES_STAGEOUT_AWS_SERVICEURL
          - ADES_STAGEOUT_AWS_REGION
          - ADES_STAGEOUT_AWS_ACCESS_KEY_ID
          - ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY
      id: stars
      arguments:
        - copy
        - -v
        - -r
        - '4'
        - -o
        - $( inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process )
        - -res
        - $( inputs.process + ".res" )
        - valueFrom: |
                  ${
                      if( !Array.isArray(inputs.wf_outputs) ) 
                      {
                          return inputs.wf_outputs.path + "/catalog.json";
                      }
                      var args=[];
                      for (var i = 0; i < inputs.wf_outputs.length; i++) 
                      {
                          args.push(inputs.wf_outputs[i].path + "/catalog.json");
                      }
                      return args;
                  }
      inputs: 
        ADES_STAGEOUT_AWS_PROFILE:
          type: string?
        ADES_STAGEOUT_AWS_SERVICEURL: 
          type: string?
        ADES_STAGEOUT_AWS_ACCESS_KEY_ID: 
          type: string?
        ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY: 
          type: string?
        aws_profiles_location:
          type: File?
        ADES_STAGEOUT_OUTPUT:
          type: string?
        ADES_STAGEOUT_AWS_REGION:
          type: string?
        process:
          type: string?
      outputs: 
        StacCatalogUri:
          outputBinding:
            outputEval: ${  return inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process + "/catalog.json"; }
          type: string
      requirements:
        InitialWorkDirRequirement:
          listing:
          - entryname: stageout.sh
            entry: |-
              #!/bin/bash
              export AWS__ServiceURL=$(inputs.ADES_STAGEOUT_AWS_SERVICEURL)
              export AWS__Region=$(inputs.ADES_STAGEOUT_AWS_REGION)
              export AWS__AuthenticationRegion=$(inputs.ADES_STAGEOUT_AWS_REGION)
              export AWS_ACCESS_KEY_ID=$(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)
              Stars $@
        InlineJavascriptRequirement: {}
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        ResourceRequirement: {}



  stagein:
    cwl: |
      cwlVersion: v1.0
      doc: "Run Stars for staging input data"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:1.0.0-beta.11
        "cwltool:Secrets":
          secrets:
          - ADES_STAGEIN_AWS_SERVICEURL
          - ADES_STAGEIN_AWS_ACCESS_KEY_ID
          - ADES_STAGEIN_AWS_SECRET_ACCESS_KEY
      id: stars
      inputs:
        ADES_STAGEIN_AWS_SERVICEURL:
          type: string?
        ADES_STAGEIN_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:
          type: string?
      outputs: {}
      baseCommand: ['/bin/bash', 'stagein.sh']
      requirements:
        InitialWorkDirRequirement:
          listing:
          - entryname: stagein.sh
            entry: |-
              #!/bin/bash
              export AWS__ServiceURL=$(inputs.ADES_STAGEIN_AWS_SERVICEURL)
              export AWS_ACCESS_KEY_ID=$(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)
              url=$1
              if curl --output /dev/null --silent --head --fail "$url"; then
                echo "URL: $url"
              else
                echo "URL does not exist: $url"
                exit 1
              fi
              Stars copy -v -rel -r 4 -o ./ --harvest $url
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        ResourceRequirement: {}

  rulez:
    cwl: |
      rulez:
        version: 1

      parser:
        type: $graph
        driver: cwl

      onstage:
        driver: cwl

        stage_in:
          connection_node: node_stage_in
          if_scatter:
            scatterMethod: dotproduct
          input:
            template:
              overwrite: True

        on_stage:
          connection_node: on_stage

        stage_out:
          connection_node: node_stage_out
          scatter: False
          if_scatter:
            scatterMethod: dotproduct
          follow_node: node_metrics_out


      output:
        driver: cwl
        name: '-'
        type: $graph


      cwl:
        GlobalInput:
          Directory: string
          Directory[]: string[]

        OptionalInput:
          Directory: string?
          Directory[]: string[]?

        stage_in:
          Directory:
            type: string
            inputBinding:
              position: 2

          Directory[]:
            type: string[]
            inputBinding:
              position: 2

        stage_out:
          Directory:
            type: Directory

          Directory[]:
            type: Directory[]

        outputBindingResult:
          command:
            Directory:
              outputBinding:
                glob: .
              type: Directory
            Directory[]:
              outputBinding:
                glob: .
              type: Directory[]
          stepOut:
            type:
              items: Directory
              type: array



ades-longhorn:
  enabled: false
