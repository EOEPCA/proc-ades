USER-SUPPLIED VALUES:
affinity: {}
autoscaling:
  enabled: false
  maxReplicas: 3
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
clusterAdminRoleName: cluster-admin
fullnameOverride: ""
image:
  pullPolicy: Always
  tag: 0.9.7
ingress:
  annotations: {}
  enabled: true
  hosts:
  - host: ades-open.demo.eoepca.org
    paths:
    - /
  tls: []
nameOverride: ""
nodeSelector: {}
persistence:
  enabled: true
  procServicesAccessMode: ReadWriteOnce
  procServicesSize: 5Gi
  storageClass: managed-nfs-storage
  userDataAccessMode: ReadWriteOnce
  userDataSize: 10Gi
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
resources:
  limits:
    cpu: 2
    memory: 4Gi
  requests:
    cpu: 500m
    memory: 2Gi
securityContext: {}
service:
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name: ""
storageClassName: managed-nfs-storage
tolerations: []
useKubeProxy: true
workflowExecutor:
  backofflimit: 3
  imagePullSecrets: []
  inputs:
    APP: ades
    STAGEIN_AWS_ACCESS_KEY_ID: test
    STAGEIN_AWS_SECRET_ACCESS_KEY: test
    STAGEIN_AWS_SERVICEURL: http://data.cloudferro.com
    STAGEOUT_AWS_SERVICEURL: https://cf2.cloudferro.com:8080
  main:
    cwl: ""
<<<<<<< Updated upstream

  stagein:
    cwl: |
      cwlVersion: v1.0
      baseCommand: Stars
      doc: "Run Stars for staging input data"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars-t2:0.6.18.19
      id: stars
      arguments:
      - copy
      - -v
      - -rel
      - -r
      - '4'
      - -o
      - ./
      - --harvest
      inputs:
        ADES_STAGEIN_AWS_SERVICEURL:
          type: string?
        ADES_STAGEIN_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:
          type: string?
      outputs: {}
      requirements:
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.aws_profile)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEIN_AWS_SERVICEURL)
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)
        ResourceRequirement: {}

  stageout:
    cwl: |
      cwlVersion: v1.0
      baseCommand: Stars
      doc: "Run Stars for staging results"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars-t2:0.9.46
      id: stars
      arguments:
      - copy
      - -v
      - -r
      - '4'
      inputs:
        ADES_STAGEOUT_AWS_PROFILE:
          type: string?
        ADES_STAGEOUT_AWS_SERVICEURL:
          type: string?
        ADES_STAGEOUT_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY:
          type: string?
        aws_profiles_location:
          type: File?
        result_directory:
          type: Directory?
          inputBinding:
            position: 7
        ADES_STAGEOUT_OUTPUT:
          type: string?
          inputBinding:
            position: 5
            prefix: -o
            valueFrom: $( self + "/" + inputs.process )
        ADES_STAGEOUT_AWS_REGION:
          type: string?
        process:
          type: string?
          inputBinding:
            position: 6
            prefix: -res
            valueFrom: $( inputs.process + ".res" )
      outputs: {}
      requirements:
        InlineJavascriptRequirement: {}
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.ADES_STAGEOUT_AWS_PROFILE)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEOUT_AWS_SERVICEURL)
            AWS__SignatureVersion: "2"
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)
            #AWS__Region: $(inputs.ADES_STAGEOUT_AWS_REGION)
            #AWS__AuthenticationRegion: $(inputs.ADES_STAGEOUT_AWS_REGION)
        ResourceRequirement: {}

  rulez:
    cwl: ""
    
  # kubernetes storage class to be used for provisioning volumes. Must be a persistent volume claim compliant (longhorn)
  processingStorageClass: longhorn
  # Size of the Kubernetes Tmp Volumes
  processingVolumeTmpSize: "5Gi"
  # Size of the Kubernetes Output Volumes
  processingVolumeOutputSize: "10Gi"
  # Max ram to use for a job
  processingMaxRam: "16Gi"
  # Max number of CPU cores to use concurrently for a job
  processingMaxCores: "8"
  # if false the Ades will clean the volume after the workflow has successfully finished running
  processingKeepWorkspace: false
  # if false the Ades will clean the volume after the workflow has finished with an error
  processingKeepWorkspaceIfFailed: false
  # includes terradue.docker.com docker credentials
  imagePullSecrets: []
  # some configuration values for submitted pod
  pod:
    env: {}
      # HTTP_PROXY: http://1.2.3.4:8534

  useResourceManager: false
  resourceManagerEndpoint: "https://resourcemanager-api.com"
  resourceManagerWorkspacePrefix: "rm-user"

  # adds a label to the job namespace
  jobNamespaceLabels:
    app: "ades-app"

  # Number of retries before considering a Job as failed
  backofflimit: 3

=======
  platformDomain: https://test.demo.eoepca.org
  pod:
    env: {}
  pod_env_vars:
    yaml: '{}'
  processingKeepWorkspace: "False"
  processingMaxCores: "4"
  processingMaxRam: 8Gi
  processingStorageClass: managed-nfs-storage
  processingVolumeOutputSize: 6Gi
  processingVolumeTmpSize: 6Gi
  resourceManagerEndpoint: https://workspace-api.test.demo.eoepca.org
  resourceManagerWorkspacePrefix: demo-user
  rulez:
    cwl: ""
  stagein:
    cwl: "cwlVersion: v1.0\nbaseCommand: Stars\ndoc: \"Run Stars for staging input
      data\"\nclass: CommandLineTool\nhints:\n  DockerRequirement:\n    dockerPull:
      terradue/stars:1.0.0-beta.7\nid: stars\narguments:\n- copy\n- -v\n- -rel\n-
      -r\n- '4'\n- -o\n- ./\n- --harvest\ninputs: \n  ADES_STAGEIN_AWS_SERVICEURL:
      \n    type: string?\n  ADES_STAGEIN_AWS_ACCESS_KEY_ID:\n    type: string?\n
      \ ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:\n    type: string?\noutputs: {}\nrequirements:\n
      \ EnvVarRequirement:\n    envDef:\n      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n
      \     # AWS__Profile: $(inputs.aws_profile)\n      # AWS__ProfilesLocation:
      $(inputs.aws_profiles_location.path)\n      AWS__ServiceURL: $(inputs.ADES_STAGEIN_AWS_SERVICEURL)\n
      \     AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)\n      AWS_SECRET_ACCESS_KEY:
      $(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)\n  ResourceRequirement: {}\n"
  stageout:
    cwl: "cwlVersion: v1.0\nbaseCommand: Stars\ndoc: \"Run Stars for staging results\"\nclass:
      CommandLineTool\nhints:\n  DockerRequirement:\n    dockerPull: terradue/stars:1.0.0-beta.7\nid:
      stars\narguments:\n- copy\n- -v\n- -r\n- '4'\ninputs: \n  ADES_STAGEOUT_AWS_PROFILE:\n
      \   type: string?\n  ADES_STAGEOUT_AWS_SERVICEURL: \n    type: string?\n  ADES_STAGEOUT_AWS_ACCESS_KEY_ID:
      \n    type: string?\n  ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY: \n    type: string?\n
      \ aws_profiles_location:\n    type: File?\n  result_directory:\n    type: Directory?\n
      \   inputBinding:\n      position: 7\n  ADES_STAGEOUT_OUTPUT:\n    type: string?\n
      \   inputBinding:\n      position: 5\n      prefix: -o\n      valueFrom: $(
      self + \"/\" + inputs.process )\n  ADES_STAGEOUT_AWS_REGION:\n    type: string?\n
      \ process:\n    type: string?\n    inputBinding:\n      position: 6\n      prefix:
      -res\n      valueFrom: $( inputs.process + \".res\" )\noutputs: {}\nrequirements:\n
      \ InlineJavascriptRequirement: {}\n  EnvVarRequirement:\n    envDef:\n      PATH:
      /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n      AWS__ServiceURL:
      $(inputs.ADES_STAGEOUT_AWS_SERVICEURL)\n      AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)\n
      \     AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)\n
      \     AWS__SignatureVersion: \"2\"\n  ResourceRequirement: {}\n"
  useResourceManager: "true"
>>>>>>> Stashed changes
wps:
  maincfgtpl: files/main.cfg.tpl
  pepBaseUrl: http://proc-ades-pep:5576
  usePep: "true"
