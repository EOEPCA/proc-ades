image:
  pullPolicy: Always
  repository: eoepca/proc-ades
  tag: "2.0.3"
persistence:
  enabled: false

fullnameOverride: "ades-dev-wasdi"
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: 148.251.234.194/32, 213.166.43.25/32, 185.52.195.40/32, 51.68.88.78/32, 2.39.30.9/32
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/issuer: letsencrypt-prod
  hosts:
    - host: gp-ades-03.terradue.com
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: ades-wasdi-tls
      hosts:
        - gp-ades-03.terradue.com

workflowExecutor:
  processingKeepWorkspace: "False"
  processingMaxCores: "2"
  processingMaxRam: 5Gi
  processingVolumeSize: "30Gi"
  # Size of the Kubernetes Tmp Volumes
  processingVolumeTmpSize: "30Gi"
  # Size of the Kubernetes Output Volumes
  processingVolumeOutputSize: "20Gi"

  calrissianImage: "terradue/calrissian:0.11.0-sprint1"
  #calrissianJobTemplatePath: "/tmp/CalrissianJobTemplate.yaml"
  imagePullSecrets:
    - name: docker-config-wasdi
  inputs:
    APP: ades

    STAGEOUT_AWS_ACCESS_KEY_ID: SCWA66S95AWW6JB2D62W
    STAGEOUT_AWS_REGION: fr-par
    STAGEOUT_AWS_SECRET_ACCESS_KEY: 68b8b90a-decd-47f8-8aed-49ab46107c5c
    STAGEOUT_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEOUT_OUTPUT: s3://wasdi-processing-results-dev

    STAGEIN_AWS_SERVICEURL: https://s3.fr-par.scw.cloud
    STAGEIN_AWS_ACCESS_KEY_ID: SCWA66S95AWW6JB2D62W
    STAGEIN_AWS_SECRET_ACCESS_KEY: 68b8b90a-decd-47f8-8aed-49ab46107c5c

  # Number of retries before considering a Job as failed
  backofflimit: 1

  processingKeepWorkspaceIfFailed: True

  processingStorageClass: openebs-kernel-nfs-scw
  processingNodeSelector:
    k8s.scaleway.com/pool-name: processing-node-pool-dev-pro

  pod:
    env:
      WASDI_USERNAME: fabrice.brito@terradue.com
      WASDI_PASSWORD: e7kBSsf3qXGvN5W

  main:
    cwl: |
      class: Workflow
      doc: Main stage manager
      id: main
      label: macro-cwl
      inputs: {}
      outputs:
        StacCatalogUri:
          outputSource:
            - node_stage_out/s3_catalog_output
          type: string  
      requirements:
        SubworkflowFeatureRequirement: {}
        ScatterFeatureRequirement: {}
      steps:
        node_stage_out:
          in: {}
          out: [s3_catalog_output]
          run: ''      

  stagein:
    cwl: |
      cwlVersion: v1.0
      baseCommand: Stars
      doc: "Run Stars for staging input data"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:2.3.1
      id: stars
      arguments:
      - copy
      - -v
      - -rel
      - -r
      - '4'
      - valueFrom: ${ if (inputs.input.split("#").length == 2) 
                    { return ["-af", inputs.input.split("#")[1]]; }
                  else {return '--empty'}
                }
      - -o
      - ./
      - valueFrom: ${ return inputs.input.split("#")[0]; }
      inputs: 
        ADES_STAGEIN_AWS_SERVICEURL: 
          type: string?
        ADES_STAGEIN_AWS_REGION:
          type: string?
        ADES_STAGEIN_AWS_ACCESS_KEY_ID:
          type: string?
        ADES_STAGEIN_AWS_SECRET_ACCESS_KEY:
          type: string?
      outputs: {}
      requirements:
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.aws_profile)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEIN_AWS_SERVICEURL)
            AWS__Region: $(inputs.ADES_STAGEIN_AWS_REGION)
            AWS__AuthenticationRegion: $(inputs.ADES_STAGEIN_AWS_REGION)
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEIN_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEIN_AWS_SECRET_ACCESS_KEY)
        ResourceRequirement: {}
        InlineJavascriptRequirement: {}


  stageout:
    cwl: |
      cwlVersion: v1.0
      baseCommand: Stars
      doc: "Run Stars for staging results"
      class: CommandLineTool
      hints:
        DockerRequirement:
          dockerPull: terradue/stars:2.3.1
      id: stars
      arguments:
        - copy
        - -v
        - -r
        - '4'
        - -o
        - $( inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process )
        - -res
        - $( inputs.process + ".res" )
        - valueFrom: |
                  ${
                      if( !Array.isArray(inputs.wf_outputs) ) 
                      {
                          return inputs.wf_outputs.path + "/catalog.json";
                      }
                      var args=[];
                      for (var i = 0; i < inputs.wf_outputs.length; i++) 
                      {
                          args.push(inputs.wf_outputs[i].path + "/catalog.json");
                      }
                      return args;
                  }
      inputs: 
        ADES_STAGEOUT_AWS_PROFILE:
          type: string?
        ADES_STAGEOUT_AWS_SERVICEURL: 
          type: string?
        ADES_STAGEOUT_AWS_ACCESS_KEY_ID: 
          type: string?
        ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY: 
          type: string?
        aws_profiles_location:
          type: File?
        ADES_STAGEOUT_OUTPUT:
          type: string?
        ADES_STAGEOUT_AWS_REGION:
          type: string?
        process:
          type: string?
      outputs: 
        s3_catalog_output:
          outputBinding:
            outputEval: ${  return inputs.ADES_STAGEOUT_OUTPUT + "/" + inputs.process + "/catalog.json"; }
          type: string
      requirements:
        InlineJavascriptRequirement: {}
        EnvVarRequirement:
          envDef:
            PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            # AWS__Profile: $(inputs.ADES_STAGEOUT_AWS_PROFILE)
            # AWS__ProfilesLocation: $(inputs.aws_profiles_location.path)
            AWS__ServiceURL: $(inputs.ADES_STAGEOUT_AWS_SERVICEURL)
            AWS__Region: $(inputs.ADES_STAGEOUT_AWS_REGION)
            AWS__AuthenticationRegion: $(inputs.ADES_STAGEOUT_AWS_REGION)
            AWS_ACCESS_KEY_ID: $(inputs.ADES_STAGEOUT_AWS_ACCESS_KEY_ID)
            AWS_SECRET_ACCESS_KEY: $(inputs.ADES_STAGEOUT_AWS_SECRET_ACCESS_KEY)
        ResourceRequirement: {}


  rulez:
    cwl: |
      rulez:
        version: 1

      parser:
        type: $graph
        driver: cwl

      onstage:
        driver: cwl

        stage_in:
          connection_node: node_stage_in
          if_scatter:
            scatterMethod: dotproduct
          input:
            template:
              overwrite: True

        on_stage:
          connection_node: on_stage

        stage_out:
          connection_node: node_stage_out
          scatter: False
          if_scatter:
            scatterMethod: dotproduct
          follow_node: node_metrics_out


      output:
        driver: cwl
        name: '-'
        type: $graph


      cwl:
        GlobalInput:
          Directory: string
          Directory[]: string[]
      
        OptionalInput:
          Directory: string?
          Directory[]: string[]?
      
        stage_in:
          Directory:
            type: string

          Directory[]:
            type: string[]

        stage_out:
          Directory:
            type: Directory

          Directory[]:
            type: Directory[]

        outputBindingResult:
          command:
            Directory:
              outputBinding:
                glob: .
              type: Directory
            Directory[]:
              outputBinding:
                glob: .
              type: Directory[]
          stepOut:
            type:
              items: Directory
              type: array



ades-longhorn:
  enabled: false
